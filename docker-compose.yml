version: '2'

volumes:
  database:

services:
  # TODO NEEDS TO BE CHECKED
  nginx:
    build:
      context: .
      dockerfile: './docker/nginx/Dockerfile'
      args:
        - API_DOMAIN=${API_DOMAIN}
        - APP_DOMAIN=${APP_DOMAIN}
    image: ${PROJECT_NAME}_nginx:development
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - '80:80'
      - '443:443'
    environment:
      TZ: ${TIMEZONE}
      API_DOMAIN: ${API_DOMAIN}
      APP_DOMAIN: ${APP_DOMAIN}
    links:
      - mysql:mysql
      - php:php
    volumes_from:
      - data

  php:
    build:
      context: .
      dockerfile: './docker/php/Dockerfile'
      args:
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_php:development
    container_name: ${PROJECT_NAME}_php
    volumes_from:
      - data
    working_dir: /var/www/backend
    ports:
      - '9000:9000'
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix
      - redis:redis

  mysql:
    build:
      context: .
      dockerfile: './docker/mysql/Dockerfile'
    image: ${PROJECT_NAME}_mysql:development
    command:
      [
        '--character-set-server=utf8',
        '--collation-server=utf8_unicode_ci',
        '--default-authentication-plugin=mysql_native_password',
      ]
    container_name: ${PROJECT_NAME}_mysql
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: ${TIMEZONE}
    volumes:
      - ./docker/mysql/scripts:/docker-entrypoint-initdb.d
      - database:/var/lib/mysql

  postfix:
    build:
      context: .
      dockerfile: './docker/postfix/Dockerfile'
    image: ${PROJECT_NAME}_postfix:development
    container_name: ${PROJECT_NAME}_postfix
    ports:
      - '25:25'
    environment:
      - DEBUG=1
      - MAIL_NAME=${MAIL_NAME}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - DOCKER_IP=${DOCKER_IP}

  cron-astro:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile'
      args:
        - BE_SRC_CODE=${ASTRO_BE_SRC_DIR}
        - BE_DEST_CODE=${ASTRO_BE_DEST_DIR}
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_cron:development
    container_name: ${PROJECT_NAME}_cron_astro
    volumes_from:
      - data
    working_dir: ${ASTRO_BE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix

  cron-pms:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile'
      args:
        - BE_SRC_CODE=${PMS_BE_SRC_DIR}
        - BE_DEST_CODE=${PMS_BE_DEST_DIR}
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_cron:development
    container_name: ${PROJECT_NAME}_cron_pms
    volumes_from:
      - data
    working_dir: ${PMS_BE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix

  cron-vms:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile'
      args:
        - BE_SRC_CODE=${VMS_BE_SRC_DIR}
        - BE_DEST_CODE=${VMS_BE_DEST_DIR}
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_cron:development
    container_name: ${PROJECT_NAME}_cron_vms
    volumes_from:
      - data
    working_dir: ${VMS_BE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix

  cron-crewing:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile'
      args:
        - BE_SRC_CODE=${CREWING_BE_SRC_DIR}
        - BE_DEST_CODE=${CREWING_BE_DEST_DIR}
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_cron:development
    container_name: ${PROJECT_NAME}_cron_crewing
    volumes_from:
      - data
    working_dir: ${CREWING_BE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix

  cron-purchasing:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile'
      args:
        - BE_SRC_CODE=${PURCHASING_BE_SRC_DIR}
        - BE_DEST_CODE=${PURCHASING_BE_DEST_DIR}
        - TIMEZONE=${TIMEZONE}
    image: ${PROJECT_NAME}_cron:development
    container_name: ${PROJECT_NAME}_cron_purchasing
    volumes_from:
      - data
    working_dir: ${PURCHASING_BE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    links:
      - mysql:mysql
      - postfix:postfix

  composer-astro:
    image: composer:latest
    container_name: ${PROJECT_NAME}_composer_astro
    environment:
      TZ: ${TIMEZONE}
      COMPOSER_HOME: '/composer'
    entrypoint: /usr/local/bin/composer.sh
    working_dir: ${ASTRO_BE_DEST_DIR}
    volumes:
      - ./docker/composer/entrypoint.sh:/usr/local/bin/composer.sh:ro
    volumes_from:
      - data

  composer-pms:
    image: composer:latest
    container_name: ${PROJECT_NAME}_composer_pms
    environment:
      TZ: ${TIMEZONE}
      COMPOSER_HOME: '/composer'
    entrypoint: /usr/local/bin/composer.sh
    working_dir: ${PMS_BE_DEST_DIR}
    volumes:
      - ./docker/composer/entrypoint.sh:/usr/local/bin/composer.sh:ro
    volumes_from:
      - data

  composer-vms:
    image: composer:latest
    container_name: ${PROJECT_NAME}_composer_vms
    environment:
      TZ: ${TIMEZONE}
      COMPOSER_HOME: '/composer'
    entrypoint: /usr/local/bin/composer.sh
    working_dir: ${VMS_BE_DEST_DIR}
    volumes:
      - ./docker/composer/entrypoint.sh:/usr/local/bin/composer.sh:ro
    volumes_from:
      - data

  composer-crewing:
    image: composer:latest
    container_name: ${PROJECT_NAME}_composer_crewing
    environment:
      TZ: ${TIMEZONE}
      COMPOSER_HOME: '/composer'
    entrypoint: /usr/local/bin/composer.sh
    working_dir: ${CREWING_BE_DEST_DIR}
    volumes:
      - ./docker/composer/entrypoint.sh:/usr/local/bin/composer.sh:ro
    volumes_from:
      - data

  composer-purchasing:
    image: composer:latest
    container_name: ${PROJECT_NAME}_composer_purchasing
    environment:
      TZ: ${TIMEZONE}
      COMPOSER_HOME: '/composer'
    entrypoint: /usr/local/bin/composer.sh
    working_dir: ${PURCHASING_BE_DEST_DIR}
    volumes:
      - ./docker/composer/entrypoint.sh:/usr/local/bin/composer.sh:ro
    volumes_from:
      - data

  node-astro:
    build:
      context: .
      dockerfile: './docker/node/Dockerfile'
      args:
        - FE_SRC_DIR=${ASTRO_FE_SRC_DIR}
        - FE_DEST_DIR=${ASTRO_FE_DEST_DIR}
    image: ${PROJECT_NAME}_node:development
    container_name: ${PROJECT_NAME}_node_astro
    working_dir: ${ASTRO_FE_DEST_DIR}
    volumes:
      - ${ASTRO_FE_SRC_DIR}/node_modules:${ASTRO_FE_DEST_DIR}/node_modules
    volumes_from:
      - data

  node-pms:
    build:
      context: .
      dockerfile: './docker/node/Dockerfile'
      args:
        - FE_SRC_DIR=${PMS_FE_SRC_DIR}
        - FE_DEST_DIR=${PMS_FE_DEST_DIR}
    image: ${PROJECT_NAME}_node:development
    container_name: ${PROJECT_NAME}_node_pms
    working_dir: ${PMS_FE_DEST_DIR}
    volumes:
      - ${PMS_FE_SRC_DIR}/node_modules:${PMS_FE_DEST_DIR}/node_modules
    volumes_from:
      - data

  node-vms:
    build:
      context: .
      dockerfile: './docker/node/Dockerfile'
      args:
        - FE_SRC_DIR=${VMS_FE_SRC_DIR}
        - FE_DEST_DIR=${VMS_FE_DEST_DIR}
    image: ${PROJECT_NAME}_node:development
    container_name: ${PROJECT_NAME}_node_vms
    working_dir: ${VMS_FE_DEST_DIR}
    volumes:
      - ${VMS_FE_SRC_DIR}/node_modules:${VMS_FE_DEST_DIR}/node_modules
    volumes_from:
      - data

  node-crewing:
    build:
      context: .
      dockerfile: './docker/node/Dockerfile'
      args:
        - FE_SRC_DIR=${CREWING_FE_SRC_DIR}
        - FE_DEST_DIR=${CREWING_FE_DEST_DIR}
    image: ${PROJECT_NAME}_node:development
    container_name: ${PROJECT_NAME}_node_crewing
    working_dir: ${CREWING_FE_DEST_DIR}
    volumes:
      - ${CREWING_FE_SRC_DIR}/node_modules:${CREWING_FE_DEST_DIR}/node_modules
    volumes_from:
      - data

  node-purchasing:
    build:
      context: .
      dockerfile: './docker/node/Dockerfile'
      args:
        - FE_SRC_DIR=${PURCHASING_FE_SRC_DIR}
        - FE_DEST_DIR=${PURCHASING_FE_DEST_DIR}
    image: ${PROJECT_NAME}_node:development
    container_name: ${PROJECT_NAME}_node_purchasing
    working_dir: ${PURCHASING_FE_DEST_DIR}
    volumes:
      - ${PURCHASING_FE_SRC_DIR}/node_modules:${PURCHASING_FE_DEST_DIR}/node_modules
    volumes_from:
      - data

  fixer-astro:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile'
      args:
        - BE_DEST_DIR=${ASTRO_BE_DEST_DIR}
    container_name: ${PROJECT_NAME}_fixer_astro
    volumes_from:
      - data
    working_dir: ${ASTRO_BE_DEST_DIR}

  fixer-pms:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile'
      args:
        - BE_DEST_DIR=${PMS_BE_DEST_DIR}
    container_name: ${PROJECT_NAME}_fixer_pms
    volumes_from:
      - data
    working_dir: ${PMS_BE_DEST_DIR}

  fixer-vms:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile'
      args:
        - BE_DEST_DIR=${VMS_BE_DEST_DIR}
    container_name: ${PROJECT_NAME}_fixer_vms
    volumes_from:
      - data
    working_dir: ${VMS_BE_DEST_DIR}

  fixer-crewing:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile'
      args:
        - BE_DEST_DIR=${CREWING_BE_DEST_DIR}
    container_name: ${PROJECT_NAME}_fixer_crewing
    volumes_from:
      - data
    working_dir: ${CREWING_BE_DEST_DIR}

  fixer-purchasing:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile'
      args:
        - BE_DEST_DIR=${PURCHASING_BE_DEST_DIR}
    container_name: ${PROJECT_NAME}_fixer_purchasing
    volumes_from:
      - data
    working_dir: ${PURCHASING_BE_DEST_DIR}

  data:
    build:
      context: .
      dockerfile: './docker/data/Dockerfile'
    image: ${PROJECT_NAME}_data:development
    container_name: ${PROJECT_NAME}_data
    volumes:
      - ${ASTRO_BE_SRC_DIR}:${ASTRO_BE_DEST_DIR}
      - ${PMS_BE_SRC_DIR}:${PMS_BE_DEST_DIR}
      - ${VMS_BE_SRC_DIR}:${VMS_BE_DEST_DIR}
      - ${CREWING_BE_SRC_DIR}:${CREWING_BE_DEST_DIR}
      - ${PURCHASING_BE_SRC_DIR}:${PURCHASING_BE_DEST_DIR}
      - ${ASTRO_FE_SRC_DIR}:${ASTRO_FE_DEST_DIR}
      - ${PMS_FE_SRC_DIR}:${PMS_FE_DEST_DIR}
      - ${VMS_FE_SRC_DIR}:${VMS_FE_DEST_DIR}
      - ${CREWING_FE_SRC_DIR}:${CREWING_FE_DEST_DIR}
      - ${PURCHASING_FE_SRC_DIR}:${PURCHASING_FE_DEST_DIR}
    environment:
      TZ: ${TIMEZONE}
    tty: true

  redis:
    build:
      context: .
      dockerfile: './docker/redis/Dockerfile'
    image: ${PROJECT_NAME}_redis:development
    container_name: ${PROJECT_NAME}_redis
    ports:
      - "6379:6379"
